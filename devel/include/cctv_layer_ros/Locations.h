// Generated by gencpp from file cctv_layer_ros/Locations.msg
// DO NOT EDIT!


#ifndef CCTV_LAYER_ROS_MESSAGE_LOCATIONS_H
#define CCTV_LAYER_ROS_MESSAGE_LOCATIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cctv_layer_ros/Coordinate.h>

namespace cctv_layer_ros
{
template <class ContainerAllocator>
struct Locations_
{
  typedef Locations_<ContainerAllocator> Type;

  Locations_()
    : msg_seq(0)
    , location()  {
    }
  Locations_(const ContainerAllocator& _alloc)
    : msg_seq(0)
    , location(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _msg_seq_type;
  _msg_seq_type msg_seq;

   typedef std::vector< ::cctv_layer_ros::Coordinate_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cctv_layer_ros::Coordinate_<ContainerAllocator> >> _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::cctv_layer_ros::Locations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cctv_layer_ros::Locations_<ContainerAllocator> const> ConstPtr;

}; // struct Locations_

typedef ::cctv_layer_ros::Locations_<std::allocator<void> > Locations;

typedef boost::shared_ptr< ::cctv_layer_ros::Locations > LocationsPtr;
typedef boost::shared_ptr< ::cctv_layer_ros::Locations const> LocationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cctv_layer_ros::Locations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cctv_layer_ros::Locations_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cctv_layer_ros::Locations_<ContainerAllocator1> & lhs, const ::cctv_layer_ros::Locations_<ContainerAllocator2> & rhs)
{
  return lhs.msg_seq == rhs.msg_seq &&
    lhs.location == rhs.location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cctv_layer_ros::Locations_<ContainerAllocator1> & lhs, const ::cctv_layer_ros::Locations_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cctv_layer_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cctv_layer_ros::Locations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cctv_layer_ros::Locations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cctv_layer_ros::Locations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cctv_layer_ros::Locations_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cctv_layer_ros::Locations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cctv_layer_ros::Locations_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cctv_layer_ros::Locations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d39aba7ca00bf507fa36e8be0212b2bd";
  }

  static const char* value(const ::cctv_layer_ros::Locations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd39aba7ca00bf507ULL;
  static const uint64_t static_value2 = 0xfa36e8be0212b2bdULL;
};

template<class ContainerAllocator>
struct DataType< ::cctv_layer_ros::Locations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cctv_layer_ros/Locations";
  }

  static const char* value(const ::cctv_layer_ros::Locations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cctv_layer_ros::Locations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 msg_seq\n"
"Coordinate[] location\n"
"\n"
"================================================================================\n"
"MSG: cctv_layer_ros/Coordinate\n"
"int16 x\n"
"int16 y\n"
;
  }

  static const char* value(const ::cctv_layer_ros::Locations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cctv_layer_ros::Locations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_seq);
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Locations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cctv_layer_ros::Locations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cctv_layer_ros::Locations_<ContainerAllocator>& v)
  {
    s << indent << "msg_seq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.msg_seq);
    s << indent << "location[]" << std::endl;
    for (size_t i = 0; i < v.location.size(); ++i)
    {
      s << indent << "  location[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cctv_layer_ros::Coordinate_<ContainerAllocator> >::stream(s, indent + "    ", v.location[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCTV_LAYER_ROS_MESSAGE_LOCATIONS_H
