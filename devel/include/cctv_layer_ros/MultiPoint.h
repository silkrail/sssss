// Generated by gencpp from file cctv_layer_ros/MultiPoint.msg
// DO NOT EDIT!


#ifndef CCTV_LAYER_ROS_MESSAGE_MULTIPOINT_H
#define CCTV_LAYER_ROS_MESSAGE_MULTIPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cctv_layer_ros
{
template <class ContainerAllocator>
struct MultiPoint_
{
  typedef MultiPoint_<ContainerAllocator> Type;

  MultiPoint_()
    : msg_seq(0)
    , x()
    , y()  {
    }
  MultiPoint_(const ContainerAllocator& _alloc)
    : msg_seq(0)
    , x(_alloc)
    , y(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _msg_seq_type;
  _msg_seq_type msg_seq;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _x_type;
  _x_type x;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> const> ConstPtr;

}; // struct MultiPoint_

typedef ::cctv_layer_ros::MultiPoint_<std::allocator<void> > MultiPoint;

typedef boost::shared_ptr< ::cctv_layer_ros::MultiPoint > MultiPointPtr;
typedef boost::shared_ptr< ::cctv_layer_ros::MultiPoint const> MultiPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cctv_layer_ros::MultiPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cctv_layer_ros::MultiPoint_<ContainerAllocator1> & lhs, const ::cctv_layer_ros::MultiPoint_<ContainerAllocator2> & rhs)
{
  return lhs.msg_seq == rhs.msg_seq &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cctv_layer_ros::MultiPoint_<ContainerAllocator1> & lhs, const ::cctv_layer_ros::MultiPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cctv_layer_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7945ea15cd4a474c5cde09582772132";
  }

  static const char* value(const ::cctv_layer_ros::MultiPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7945ea15cd4a474ULL;
  static const uint64_t static_value2 = 0xc5cde09582772132ULL;
};

template<class ContainerAllocator>
struct DataType< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cctv_layer_ros/MultiPoint";
  }

  static const char* value(const ::cctv_layer_ros::MultiPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 msg_seq\n"
"int16[] x\n"
"int16[] y\n"
;
  }

  static const char* value(const ::cctv_layer_ros::MultiPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_seq);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cctv_layer_ros::MultiPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cctv_layer_ros::MultiPoint_<ContainerAllocator>& v)
  {
    s << indent << "msg_seq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.msg_seq);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CCTV_LAYER_ROS_MESSAGE_MULTIPOINT_H
